// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	

	//Logic of writeM
	And(a=instruction[15], b=instruction[3], out=writeM); //write to Memory if least significant d bit is 1 and is c instruction

	//Logic of the A-Register
	Or(a=isAinstruction, b=instruction[5], out=loadARegister); //load in A register when A-instruction or when most significant d bit is 1
	Mux16(a=instruction, b=outputALU, sel=instruction[15], out=inputARegister); //if A instruction, select a-input of mux16, which is the instruction itself
	ARegister(in=inputARegister, load=loadARegister, out=outputARegister, out[0..14]=addressM);	
	
	//Logic of the D-Register
	Not(in=instruction[15], out=isAinstruction);
	And(a=instruction[4], b=instruction[15], out=loadDRegister); //load in D-Register when middle d bit is 1 and when it is a C instruction
	DRegister(in=outputALU, load=loadDRegister, out=outputDRegister);

	//Logic of the ALU
	
	Mux16(a=outputARegister, b=inM, sel=instruction[12], out=inputALU); //if a-bit (see page 71) is 0, use A-Register. Otherwise, use D-Register.
	ALU(x=outputDRegister ,y=inputALU ,zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] ,no=instruction[6] ,out=outputALU ,out=outM ,zr=isZero ,ng=isNegative);

	//Logic of the Program Counter
	Not(in=isZero, out=isNotZero);
	Not(in=isNegative, out=isPositiveOrZero);

	// if least significant j-bit  == 1 AND comp > 0 -> jump (PC load == 1)	
	And(a=isNotZero, b=isPositiveOrZero, out=isPositive);
	And(a=instruction[0], b=isPositive, out=jgt);

	// if most significant j-bit == 1 AND comp < 0 -> jump (PC load == 1)
	And(a=isNegative, b=instruction[2], out=jlt);

	// if middle j-bit == 1 AND comp == 0 -> jump (PC load == 1)
	And(a=isZero, b=instruction[1], out=jeq);

	//jump if (jeq == 1) OR (jlt == 1) OR (jgt == 1)
	Or(a=jeq, b=jlt, out= jle);
	Or(a=jle, b=jgt, out=jumpConditionTrue);
	And(a=jumpConditionTrue, b=instruction[15], out=loadPC); //only jump if C-instruction
	Not(in=loadPC, out=incPC); //increment if you don't jump
	PC(in=outputARegister, load=loadPC, inc=incPC, reset=reset ,out[0..14]=pc);	














}
